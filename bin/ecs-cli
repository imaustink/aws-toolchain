#!/usr/bin/env node
const { AWSConfiguration } = require("../src/aws");
const { CloudWatchClient } = require("../src/cloudwatch");
const { ECSClient } = require("../src/ecs");
const { signale } = require("../src/signale");

const { argv } = require("yargs/yargs")(process.argv.slice(2))
  .command({
    command: "logs",
    aliases: ["log", "tail"],
    desc: "Tail the logs of an ECS container",
    builder: (yargs) => {
      return yargs
        .usage("Usage: $0 logs -p bafs-dev -c clearwater-ecs -s objects")
        .alias("c", "cluster")
        .alias("s", "service")
        .alias("f", "follow")
        .boolean("f")
        .demandOption(["profile", "cluster", "service"]);
    },
  })
  .alias("r", "region")
  .alias("p", "profile")
  .default("r", "us-east-1")
  .option("debug")
  .demandCommand();

const {
  profile,
  region,
  cluster,
  service,
  follow,
  _: [command],
} = argv;

signale.log({ profile, region, cluster, service, follow, command });

const configuration = new AWSConfiguration(profile, region);
const ecsClient = new ECSClient(configuration);
const cloudWatchClient = new CloudWatchClient(configuration);

switch (command) {
  case "logs":
    logsHandler(cluster, service, follow).catch((error) =>
      console.error(error)
    );
}

async function logsHandler(cluster, service, follow) {
  const clusterQuery = new RegExp(cluster, "i");
  const matchingClusters = await ecsClient.searchClusterNames(clusterQuery);

  // TODO print out available cluster names
  if (matchingClusters.length === 0)
    throw new Error(`No clusters matching ${clusterQuery} were found!`);
  // TODO setup a prompt here
  if (matchingClusters.length > 1)
    throw new Error(
      `More than one cluster matching ${clusterQuery} was found!`
    );

  const [clusterArn] = matchingClusters;

  const taskQuery = new RegExp(service, "i");

  const matchingTasks = await ecsClient.searchTaskNames(clusterArn, taskQuery);

  // TODO print out available tasks names
  if (matchingTasks.length === 0)
    throw new Error(`No tasks matching ${taskQuery} were found!`);
  // TODO setup a prompt here
  if (matchingTasks.length > 1)
    throw new Error(`More than one task matching ${taskQuery} was found!`);

  const { taskArn, taskDefinitionArn } = matchingTasks[0];
  const [, , taskId] = taskArn.split("/");

  const { logGroupName, logStreamName } = await ecsClient.findTaskLogStream(
    taskDefinitionArn,
    taskId
  );

  const logStreamsEmitter = cloudWatchClient.createLogStreamLinesEmitter(
    logGroupName,
    logStreamName
  );

  logStreamsEmitter.on("data", (lines) => {
    process.stdout.write(`${lines.join("\n")}\n`);
    if (!follow) logStreamsEmitter.stop();
  });

  logStreamsEmitter.on("error", (error) => console.error(error));

  logStreamsEmitter.start();
}
